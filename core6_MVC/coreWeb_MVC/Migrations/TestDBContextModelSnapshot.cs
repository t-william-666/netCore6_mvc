// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using coreWeb_MVC.Models;

#nullable disable

namespace coreWeb_MVC.Migrations
{
    [DbContext(typeof(TestDBContext))]
    partial class TestDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("coreWeb_MVC.Models.BannerImage", b =>
                {
                    b.Property<int>("BannerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Paths")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("Text_1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text_2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text_3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TitleDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TitleDescs")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BannerID");

                    b.ToTable("BannerImage", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ActivityPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductIntroduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("ProductStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ProductState")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ShopID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("discountType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ProductID")
                        .HasName("PK_Shop");

                    b.HasIndex("ProductStarNum");

                    b.HasIndex("ProductType");

                    b.HasIndex("ShopID");

                    b.HasIndex(new[] { "ProductID" }, "IX_ProductID")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductCart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CartType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ProductCartNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CartID")
                        .HasName("PK_ShopCar");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("ProductCart", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductCollect", b =>
                {
                    b.Property<int>("CollectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CollectID")
                        .HasName("PK_ShopCollect");

                    b.ToTable("ProductCollect", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("CommentStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("CommentState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CommentTxt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CommentID")
                        .HasName("PK_ShopComment");

                    b.HasIndex("CommentStarNum");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("ProductComment", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductCommentImage", b =>
                {
                    b.Property<int>("ComImgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ComImgPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ComImgSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ComOrderby")
                        .HasColumnType("int");

                    b.Property<int>("ComState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ComImgID");

                    b.ToTable("ProductCommentImage", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductCommentLike", b =>
                {
                    b.Property<int>("LikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeID"), 1L, 1);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CommentID")
                        .HasColumnType("int");

                    b.Property<int?>("CommreplyID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LikeID");

                    b.ToTable("ProductCommentLike", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductCommentReply", b =>
                {
                    b.Property<int>("CommreplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommreplyID"), 1L, 1);

                    b.Property<string>("ComText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("addDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("toUserID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CommreplyID");

                    b.HasIndex("CommentID");

                    b.ToTable("ProductCommentReply", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductImage", b =>
                {
                    b.Property<int>("ImgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImgID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImgName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ImgOrderby")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ImgState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ImgType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ImgID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShopID");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductOrder", b =>
                {
                    b.Property<string>("OrderNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderAddressId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderAmountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("OrderDiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<string>("OrderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderNum")
                        .HasColumnType("int");

                    b.Property<int>("OrderState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("OrderSumPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderNo")
                        .HasName("PK_ShopOrder");

                    b.HasIndex("OrderAddressId");

                    b.HasIndex("UserID");

                    b.ToTable("ProductOrder", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductOrderDetail", b =>
                {
                    b.Property<int>("DetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailID"), 1L, 1);

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderDetailState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderProductNum")
                        .HasColumnType("int");

                    b.Property<int?>("OrderdetailAddressID")
                        .HasColumnType("int");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShopID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DetailID")
                        .HasName("PK_ShopOrderDetail");

                    b.HasIndex("OrderNo");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductOrderDetail", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductOrderLogistic", b =>
                {
                    b.Property<int>("LogisticsID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DetailID")
                        .HasColumnType("int");

                    b.Property<string>("ExpressCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExpressDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExpressID")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ExpressType")
                        .HasColumnType("int");

                    b.HasKey("LogisticsID")
                        .HasName("PK_ProductPorderLogistics");

                    b.HasIndex("DetailID");

                    b.ToTable("ProductOrderLogistics");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductStar", b =>
                {
                    b.Property<int>("StarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarID"), 1L, 1);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StarDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("StarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StarOrderby")
                        .HasColumnType("int");

                    b.Property<string>("StarTxt")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("StarType")
                        .HasColumnType("int");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.HasKey("StarID");

                    b.ToTable("ProductStars");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.Shop", b =>
                {
                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopBoss")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopIntroduce")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopMobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShopOpenTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ShopStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ShopState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ShopType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((101))");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ShopID")
                        .HasName("PK_Shop_1");

                    b.HasIndex("ShopStarNum");

                    b.HasIndex("ShopType");

                    b.HasIndex(new[] { "ID" }, "IX_ShopID")
                        .IsUnique();

                    b.ToTable("Shop", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ShopImage", b =>
                {
                    b.Property<int>("ImgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImgID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImgName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ImgOrderby")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImgType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ImgID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShopID");

                    b.ToTable("ShopImage", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ShopProductStarRating", b =>
                {
                    b.Property<decimal>("StarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Star1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StarDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StarOrder")
                        .HasColumnType("int");

                    b.Property<int?>("StarType")
                        .HasColumnType("int");

                    b.HasKey("StarNum")
                        .HasName("PK_ProductStarRating");

                    b.ToTable("ShopProductStarRating", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ShopProductType", b =>
                {
                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProductType")
                        .HasName("PK_ShopTypes");

                    b.ToTable("ShopProductTypes");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SuperProductView", b =>
                {
                    b.Property<decimal?>("ActivityPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath1")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgPath2")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductIntroduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductNum")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProductStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ProductState")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopBoss")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopIntroduce")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopMobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShopOpenTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ShopStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ShopState")
                        .HasColumnType("int");

                    b.Property<int?>("ShopType")
                        .HasColumnType("int");

                    b.Property<string>("Star1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StarDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("StarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StarOrder")
                        .HasColumnType("int");

                    b.Property<int?>("StarType")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("discountType")
                        .HasColumnType("int");

                    b.ToView("SuperProductView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SupProductdetailView", b =>
                {
                    b.Property<decimal?>("ActivityPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImgAddDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ImgID")
                        .HasColumnType("int");

                    b.Property<string>("ImgName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ImgOrderby")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ImgState")
                        .HasColumnType("int");

                    b.Property<string>("ImgType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductIntroduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductNum")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProductStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ProductState")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ShopAddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShopAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopBoss")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopIntroduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopMobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ShopName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShopOpenTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("ShopStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ShopState")
                        .HasColumnType("int");

                    b.Property<int?>("ShopType")
                        .HasColumnType("int");

                    b.Property<string>("Star1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StarDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("StarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StarOrder")
                        .HasColumnType("int");

                    b.Property<int?>("StarType")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("discountType")
                        .HasColumnType("int");

                    b.ToView("SupProductdetailView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SupShopdetailView", b =>
                {
                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImgAddDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ImgID")
                        .HasColumnType("int");

                    b.Property<string>("ImgName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ImgOrderby")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImgType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopBoss")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopIntroduce")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopMobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShopOpenTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ShopStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ShopState")
                        .HasColumnType("int");

                    b.Property<int?>("ShopType")
                        .HasColumnType("int");

                    b.Property<string>("Star1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StarDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("StarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StarOrder")
                        .HasColumnType("int");

                    b.Property<int?>("StarType")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToView("SupShopdetailView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SupUserCommentView", b =>
                {
                    b.Property<string>("Account")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ComImgID")
                        .HasColumnType("int");

                    b.Property<string>("ComImgPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ComImgSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ComOrderby")
                        .HasColumnType("int");

                    b.Property<int>("ComState")
                        .HasColumnType("int");

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<int?>("CommentLike")
                        .HasColumnType("int");

                    b.Property<decimal>("CommentStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("CommentState")
                        .HasColumnType("int");

                    b.Property<string>("CommentTxt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<int?>("ImgHeight")
                        .HasColumnType("int");

                    b.Property<string>("ImgID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgSize")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ImgState")
                        .HasColumnType("int");

                    b.Property<int>("ImgType")
                        .HasColumnType("int");

                    b.Property<int?>("ImgWidth")
                        .HasColumnType("int");

                    b.Property<string>("Introduce")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength();

                    b.Property<string>("ShopID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Star1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StarDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("StarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StarOrder")
                        .HasColumnType("int");

                    b.Property<int?>("StarType")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("SupUserCommentView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SupUserLikeProductView", b =>
                {
                    b.Property<decimal?>("ActivityPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImgPath1")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgPath2")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LikeID")
                        .HasColumnType("int");

                    b.Property<int>("LikeType")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductIntroduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductNum")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProductStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ProductState")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Star1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StarDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("StarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StarOrder")
                        .HasColumnType("int");

                    b.Property<int?>("StarType")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("discountType")
                        .HasColumnType("int");

                    b.ToView("SupUserLikeProductView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SupUserLikeShopView", b =>
                {
                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImgPath1")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgPath2")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopBoss")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopIntroduce")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShopMobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShopOpenTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ShopStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ShopState")
                        .HasColumnType("int");

                    b.Property<int?>("ShopType")
                        .HasColumnType("int");

                    b.Property<string>("Star1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star4")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Star5")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StarDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("StarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("StarOrder")
                        .HasColumnType("int");

                    b.Property<int?>("StarType")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToView("SupUserLikeShopView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SupUserOrderdetailView", b =>
                {
                    b.Property<decimal?>("ActivityPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DetailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DetailID")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImgPath1")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgPath2")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("OrderAddressId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderAmountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderDetailState")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderDiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("OrderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderNum")
                        .HasColumnType("int");

                    b.Property<int?>("OrderProductNum")
                        .HasColumnType("int");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderSumPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int?>("OrderdetailAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Other")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductIntroduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductNum")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProductStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ProductState")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("discountType")
                        .HasColumnType("int");

                    b.ToView("SupUserOrderdetailView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SupUserOrderLogisticView", b =>
                {
                    b.Property<decimal?>("ActivityPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DetailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DetailID")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExpressCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExpressDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExpressID")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ExpressType")
                        .HasColumnType("int");

                    b.Property<int>("LogisticsID")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("OrderAddressId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderAmountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderDetailState")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderDiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderNum")
                        .HasColumnType("int");

                    b.Property<int?>("OrderProductNum")
                        .HasColumnType("int");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderSumPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int?>("OrderdetailAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Other")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductIntroduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductNum")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProductStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ProductState")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShopID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("discountType")
                        .HasColumnType("int");

                    b.ToView("SupUserOrderLogisticView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.SupUserProductCartView", b =>
                {
                    b.Property<decimal?>("ActivityPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int>("CartType")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath1")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImgPath2")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCartNum")
                        .HasColumnType("int");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductIntroduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductNum")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProductStarNum")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("ProductState")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStock")
                        .HasColumnType("int");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("discountType")
                        .HasColumnType("int");

                    b.ToView("SupUserProductCartView");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.TitleList", b =>
                {
                    b.Property<int>("TitleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleClass1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleClass2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleClass3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleDesc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TitleOrderby")
                        .HasColumnType("int");

                    b.Property<string>("TitleUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Titleothername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("about")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TitleID");

                    b.ToTable("TitleList", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Account")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Introduce")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength();

                    b.Property<string>("UserEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("UserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserAddress", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DetailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Other")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressID")
                        .HasName("PK_Address");

                    b.HasIndex("UserID");

                    b.ToTable("UserAddress", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserImageList", b =>
                {
                    b.Property<string>("ImgID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ImgHeight")
                        .HasColumnType("int");

                    b.Property<string>("ImgSize")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ImgState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ImgType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ImgWidth")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ImgID")
                        .HasName("PK_UserImage");

                    b.HasIndex("UserID");

                    b.ToTable("UserImageList", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserLike", b =>
                {
                    b.Property<int>("LikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LikeType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ProductID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LikeID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShopID");

                    b.HasIndex("UserID");

                    b.ToTable("UserLike", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserLoginLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LoginIP")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LoginState")
                        .HasColumnType("int");

                    b.Property<string>("LoginVpnIP1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LoginVpnIP2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LoginVpnIP3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LogID");

                    b.ToTable("UserLoginLog", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserLookProduct", b =>
                {
                    b.Property<int>("LookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PoductID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LookID");

                    b.HasIndex("PoductID");

                    b.HasIndex("UserID");

                    b.ToTable("UserLookProduct", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserSearch", b =>
                {
                    b.Property<int>("searchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("searchID"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SearchName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("searchID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSearch", (string)null);
                });

            modelBuilder.Entity("coreWeb_MVC.Models.Product", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.ShopProductStarRating", "ProductStarNumNavigation")
                        .WithMany("Products")
                        .HasForeignKey("ProductStarNum")
                        .HasConstraintName("FK_Product_ProductStarRating");

                    b.HasOne("coreWeb_MVC.Models.ShopProductType", "ProductTypeNavigation")
                        .WithMany("Products")
                        .HasForeignKey("ProductType")
                        .IsRequired()
                        .HasConstraintName("FK_Product_ShopProductTypes");

                    b.HasOne("coreWeb_MVC.Models.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shop_Product");

                    b.Navigation("ProductStarNumNavigation");

                    b.Navigation("ProductTypeNavigation");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductCart", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.Product", "Product")
                        .WithMany("ProductCarts")
                        .HasForeignKey("ProductID")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCart_Product");

                    b.HasOne("coreWeb_MVC.Models.User", "User")
                        .WithMany("ProductCarts")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCart_Users");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductComment", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.ShopProductStarRating", "CommentStarNumNavigation")
                        .WithMany("ProductComments")
                        .HasForeignKey("CommentStarNum")
                        .IsRequired()
                        .HasConstraintName("FK_ProductComment_ShopProductStarRating");

                    b.HasOne("coreWeb_MVC.Models.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductID")
                        .IsRequired()
                        .HasConstraintName("FK_ProductComment_Product");

                    b.HasOne("coreWeb_MVC.Models.User", "User")
                        .WithMany("ProductComments")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_ProductComment_Users");

                    b.Navigation("CommentStarNumNavigation");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductCommentImage", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.ProductComment", "ComImg")
                        .WithOne("ProductCommentImage")
                        .HasForeignKey("coreWeb_MVC.Models.ProductCommentImage", "ComImgID")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCommentImage_ProductComment");

                    b.Navigation("ComImg");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductCommentReply", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.ProductComment", "Comment")
                        .WithMany("ProductCommentReplies")
                        .HasForeignKey("CommentID")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCommentReply_ProductComment");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductImage", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductImage_Product");

                    b.HasOne("coreWeb_MVC.Models.Shop", "Shop")
                        .WithMany("ProductImages")
                        .HasForeignKey("ShopID")
                        .HasConstraintName("FK_ProductImage_Shop");

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductOrder", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.UserAddress", "OrderAddress")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderAddressId")
                        .HasConstraintName("FK_ProductOrder_ProductOrder");

                    b.HasOne("coreWeb_MVC.Models.User", "User")
                        .WithMany("ProductOrders")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_ProductOrder_Users");

                    b.Navigation("OrderAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductOrderDetail", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.ProductOrder", "OrderNoNavigation")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("OrderNo")
                        .IsRequired()
                        .HasConstraintName("FK_ProductOrderDetail_ProductOrder");

                    b.HasOne("coreWeb_MVC.Models.Product", "Product")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("ProductID")
                        .IsRequired()
                        .HasConstraintName("FK_ProductOrderDetail_Product");

                    b.Navigation("OrderNoNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductOrderLogistic", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.ProductOrderDetail", "Detail")
                        .WithMany("ProductOrderLogistics")
                        .HasForeignKey("DetailID")
                        .HasConstraintName("FK_ProductOrderLogistics_ProductOrderDetail");

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.Shop", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.ShopProductStarRating", "ShopStarNumNavigation")
                        .WithMany("Shops")
                        .HasForeignKey("ShopStarNum")
                        .IsRequired()
                        .HasConstraintName("FK_Shop_ProductStarRating");

                    b.HasOne("coreWeb_MVC.Models.ShopProductType", "ShopTypeNavigation")
                        .WithMany("Shops")
                        .HasForeignKey("ShopType")
                        .HasConstraintName("FK_Shop_ShopProductTypes");

                    b.Navigation("ShopStarNumNavigation");

                    b.Navigation("ShopTypeNavigation");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ShopImage", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.Product", "Product")
                        .WithMany("ShopImages")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ShopImage_Product");

                    b.HasOne("coreWeb_MVC.Models.Shop", "Shop")
                        .WithMany("ShopImages")
                        .HasForeignKey("ShopID")
                        .HasConstraintName("FK_ShopImage_Shop");

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserAddress", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserAddress_UserAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserImageList", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.User", "User")
                        .WithMany("UserImageLists")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserImageList_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserLike", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.Product", "Product")
                        .WithMany("UserLikes")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_UserLike_Product");

                    b.HasOne("coreWeb_MVC.Models.Shop", "Shop")
                        .WithMany("UserLikes")
                        .HasForeignKey("ShopID")
                        .HasConstraintName("FK_UserLike_Shop");

                    b.HasOne("coreWeb_MVC.Models.User", "User")
                        .WithMany("UserLikes")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserLike_Users");

                    b.Navigation("Product");

                    b.Navigation("Shop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserLookProduct", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.Product", "Poduct")
                        .WithMany("UserLookProducts")
                        .HasForeignKey("PoductID")
                        .HasConstraintName("FK_UserLookProduct_Product");

                    b.HasOne("coreWeb_MVC.Models.User", "User")
                        .WithMany("UserLookProducts")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_UserLookProduct_Users");

                    b.Navigation("Poduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserSearch", b =>
                {
                    b.HasOne("coreWeb_MVC.Models.User", "User")
                        .WithMany("UserSearches")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_UserSearch_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.Product", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrderDetails");

                    b.Navigation("ShopImages");

                    b.Navigation("UserLikes");

                    b.Navigation("UserLookProducts");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductComment", b =>
                {
                    b.Navigation("ProductCommentImage")
                        .IsRequired();

                    b.Navigation("ProductCommentReplies");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductOrder", b =>
                {
                    b.Navigation("ProductOrderDetails");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ProductOrderDetail", b =>
                {
                    b.Navigation("ProductOrderLogistics");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.Shop", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("Products");

                    b.Navigation("ShopImages");

                    b.Navigation("UserLikes");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ShopProductStarRating", b =>
                {
                    b.Navigation("ProductComments");

                    b.Navigation("Products");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.ShopProductType", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.User", b =>
                {
                    b.Navigation("ProductCarts");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductOrders");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserImageLists");

                    b.Navigation("UserLikes");

                    b.Navigation("UserLookProducts");

                    b.Navigation("UserSearches");
                });

            modelBuilder.Entity("coreWeb_MVC.Models.UserAddress", b =>
                {
                    b.Navigation("ProductOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
