

////----------------------------------------------------------【SQL Sever数据库生成数据库模型】------------------------------------------------------------------
//.net Core 6 生成数据库模型

--添加所需要DLL--------------------------------------------------------------------------------------------------------------------------

//步骤开始 》》 “工具”>“NuGet 包管理器”>“包管理器控制台”
//第一个 》》 我们将使用一些 Entity Framework 用以在.NET Core程序中连接SQL Sever数据库的组件
Install-Package Microsoft.EntityFrameworkCore       
//第二个 》》 我们将使用一些 Entity Framework SqlServer 获取对应数据实体。因此，我们也会安装此工具包：
Install-Package Microsoft.EntityFrameworkCore.SqlServer
//第三个 》》 我们将使用一些 Entity Framework Tools 从数据库创建模型。因此，我们也会安装此工具包：
Install-Package Microsoft.EntityFrameworkCore.Tools
//第四个 》》 我们稍后将使用一些 ASP.NET Core 基架工具来创建控制器和视图。因此，我们也会安装此设计包:
Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design

// 下面这句是生成数据库模型-----------------------------------【SQL Sever数据库生成数据库模型】------------------------------------------
Scaffold-DbContext "Server=服务器名称;Database=数据库名称;Trusted_Connection=True;User ID=登录名;Password=密码;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
--项目不能报错
Scaffold-DbContext "Server=.;Database=TestDB;Trusted_Connection=True;User ID=sa;Password=123456;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models

// 下面这句是更新数据库模型-----------------------------------【SQL Sever数据库更新数据库模型】------------------------------------------
Scaffold-DbContext "Server=服务器名称;Database=数据库名称;Trusted_Connection=True;User ID=登录名;Password=密码;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force -UseDatabaseNames
--项目不能报错
Scaffold-DbContext "Server=.;Database=TestDB;Trusted_Connection=True;User ID=sa;Password=123456;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force -UseDatabaseNames


另一个方法
//第一个 》》 Install-Package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore
//第二个 》》 Install-Package Microsoft.EntityFrameworkCore.SqlServer
//第三个 》》 Install-Package Microsoft.EntityFrameworkCore.Tools



// 下面这句是添加数据库模型-----------------------------------【根据数据模型 添加SQL Sever数据库】---------------------------------------
//步骤开始 》》 “工具”>“NuGet 包管理器”>“包管理器控制台”
第一步输入  Add-Migration init
第二步看情况 如果出现To undo this action, use Remove-Migration. 则需要继续输入命令：Update-Database init
第三步输入  Update-Database 出现Done.表示成功创建数据库


// 下面这句是添加数据库模型-----------------------------------【根据数据模型 更改SQL Sever数据库】---------------------------------------
//步骤开始 》》 “工具”>“NuGet 包管理器”>“包管理器控制台”
第一步输入  Enable-Migrations -EnableAutomaticMigrations   执行成功后，添加Migrations文件夹，并生成类文件Configuration.cs 启用迁移-启用自动迁移
第二步输入  Add-Migration InitialCreate    执行成功后，在Migrations文件夹中新增类文件201309201556388_InitialCreate.cs
第三步输入  Update-Database -Verbose   执行结果生成与上面一致的数据库
第四步输入  Add-Migration 实体类   在数据库模型中添加City类，执行程序包管理器控制台语句，Migrations文件夹中新增类文件201309201643300_AddCity.cs
第五步输入  Update-Database -Verbose 

//如果数据库已存在 改数据库 删除Migrations文件夹的多余新增类文件201309201556388_InitialCreate.cs（如果有）
Add-Migration Userschange  //添加新的 新增类文件201309201556388_InitialCreate.cs
Update-Database  //执行修改（将实体类新加的字段 添加到 数据库中）



-OutputDir *** 实体文件所存放的文件目录
-ContextDir *** DbContext文件存放的目录
-Context *** DbContext文件名
-Schemas *** 需要生成实体数据的数据表所在的模式
-Tables *** 需要生成实体数据的数据表的集合
-DataAnnotations *** 数据注释
-UseDatabaseNames 直接使用数据库中的表名和列名（某些版本不支持）
-Force 强制执行，重写已经存在的实体文件   









---------------------------------------------------------------------------------------------------------------------------------------------------------------
//Microsoft.EntityFrameworkCore.Design包含Entity Framework Core的所有设计时逻辑.这是所有的各种工具(PMC的cmdlet一样的代码Add-Migration,dotnet ef和ef.exe)调入.//
// Install-Package Microsoft.EntityFrameworkCore.Design                                                                                                      //
//如果您不使用迁移或逆向工程,则不需要它.                           数据迁移                                                                                  //
// Install-Package Microsoft.EntityFrameworkCore.Relational                                                                                                  //
//当你确实需要它时,我们鼓励PrivateAssets="All"它不会发布到几乎肯定不需要它的服务器上.                                                                        //
---------------------------------------------------------------------------------------------------------------------------------------------------------------

  







////----------------------------------------------------------【MySQL 数据库生成数据库模型】--------------------------------------------------------------------
//.net Core 6 生成数据库模型

--添加所需要DLL-----------------------------------------------------------------------------------------------------------------------

//步骤开始 》》 “工具”>“NuGet 包管理器”>“包管理器控制台”
//第一个 》》 我们将使用一些 Entity Framework 用以在.NET Core程序中连接MySql数据库的组件
Install-Package MySql.EntityFrameworkCore
//第二个 》》 我们将使用一些 Entity Framework MySql 获取对应数据实体。因此，我们也会安装此工具包：
Install-Package Pomelo.EntityFrameworkCore.MySql
//第三个 》》 我们将使用一些 Entity Framework Tools 从数据库创建模型。因此，我们也会安装此工具包：
Install-Package Microsoft.EntityFrameworkCore.Tools
//第四个 》》 我们稍后将使用一些 ASP.NET Core 基架工具来创建控制器和视图。因此，我们也会安装此设计包:
Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design


// 下面这句是生成数据库模型-----------------------------------【MySQL 数据库生成数据库模型】------------------------------------------
Scaffold-DbContext "server=服务器名称;userid=登录名;pwd=密码;port=端口号;database=数据库名称;sslmode=none;" Pomelo.EntityFrameworkCore.MySql -OutputDir Models -Force

// 下面这句是更新数据库模型-----------------------------------【MySQL 数据库更新数据库模型】------------------------------------------
Scaffold-DbContext "server=服务器名称;userid=登录名;pwd=密码;port=端口号;database=数据库名称;sslmode=none;" Pomelo.EntityFrameworkCore.MySql -OutputDir Models -UseDatabaseNames -Force


-OutputDir *** 实体文件所存放的文件目录
-ContextDir *** DbContext文件存放的目录
-Context *** DbContext文件名
-Schemas *** 需要生成实体数据的数据表所在的模式
-Tables *** 需要生成实体数据的数据表的集合
-DataAnnotations *** 数据注释
-UseDatabaseNames 直接使用数据库中的表名和列名（某些版本不支持）
-Force 强制执行，重写已经存在的实体文件   








//ASP.NET Core 包含三个用于处理【防伪造令牌】的筛选器：
//【ValidateAntiForgeryToken】  操作筛选器可应用于单个操作、控制器或全局操作。除非请求包含有效的防伪造令牌，否则对已应用此筛选器的操作的请求将被阻止：
//【AutoValidateAntiforgeryToken】  导致为所有不安全的 HTTP 方法验证防伪标记的特性。作为全局筛选器 说人话就是放在控制器前面的位置，作为全局令牌。
//【IgnoreAntiforgeryToken】  给定操作（或控制器）无需防伪造令牌。说人话就是 禁用令牌，加了IgnoreAntiforgeryToken就不需要验证令牌









=============================================使用sql语句给SQL server数据库添加外键===============================================
ALTER TABLE Product --外键表
   ADD CONSTRAINT FK_Shop_Product FOREIGN KEY (ShopID)
      REFERENCES Shop (ShopID) --主键表 
      ON DELETE CASCADE
      ON UPDATE CASCADE
;

=============================================使用sql语句给SQL server数据库添加触发器===============================================

USE [TestDB]
GO
/****** Object:  Trigger [dbo].[triggerProductImage]    Script Date: 2022/4/25 11:57:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER trigger [dbo].[triggerProductImage]  
on [dbo].[ProductImage] after 
insert as
begin
--声明变量
declare @id int,@pID nvarchar(50), @maxNum int,@other int
--给声明的变量赋值（如果是与表有关 必须要用select，其他可用set）
select @id=ImgID from inserted 
select @pID =ProductID from inserted
--获取该条商品图片最大的排序
set @maxNum =(select max(ImgOrderby) from ProductImage where ProductID=@pID) set @other=1
--修改新增商品图片的排序
if(@maxNum is null)
    begin
      update ProductImage  set ImgOrderby = 1 where ImgID=@id
    end
else
    begin
      update ProductImage  set ImgOrderby = @maxNum+1 where ImgID=@id
    end
end
























